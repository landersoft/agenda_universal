# aca van los modelos
"""
üìö EXPLICACI√ìN DE LIBRER√çAS UTILIZADAS

1. MARSHMALLOW:
   - Es como un "filtro inteligente" para datos
   - Valida que los datos tengan el formato correcto
   - Ejemplo: Si esperamos un email, verifica que tenga @ y .com
   - Limpia datos autom√°ticamente (quita espacios, convierte may√∫sculas)

2. DATETIME:
   - Maneja fechas y horas
   - Permite comparar fechas, sumar/restar tiempo
   - √ötil para horarios de citas m√©dicas

3. RE (Regular Expressions):
   - Busca patrones en texto
   - Ejemplo: Validar que un tel√©fono tenga formato +56 9 1234 5678
   - Como un "buscador avanzado" de texto

4. TYPING:
   - Ayuda a especificar qu√© tipo de datos espera una funci√≥n
   - Dict[str, Any] = Diccionario con llaves string y valores cualquiera
   - Hace el c√≥digo m√°s claro y ayuda a encontrar errores
"""

from marshmallow import Schema, fields, validate, ValidationError, pre_load, post_load
from datetime import datetime
import re
from typing import Dict, Any


class BaseSchema(Schema):
    """
    üèóÔ∏è ESQUEMA BASE

    ¬øQu√© hace?
    - Define campos que TODOS los modelos van a tener
    - Como una "plantilla" que otros modelos pueden usar

    ¬øPor qu√© usar esto?
    - Evita repetir c√≥digo
    - Todos los registros tendr√°n fecha de creaci√≥n y modificaci√≥n
    """

    # dump_default = valor que se usa cuando se convierte a JSON
    created_at = fields.DateTime(dump_default=datetime.utcnow)  # Fecha de creaci√≥n
    updated_at = fields.DateTime(
        dump_default=datetime.utcnow
    )  # Fecha de √∫ltima modificaci√≥n


class EspecialidadSchema(BaseSchema):
    """
    üè• ESQUEMA PARA ESPECIALIDADES M√âDICAS

    ¬øQu√© valida?
    - Que el nombre no est√© vac√≠o y no sea muy largo
    - Que tenga una descripci√≥n clara
    - Que incluya palabras clave para b√∫squedas

    Ejemplo de datos v√°lidos:
    {
        "nombre": "Cardiolog√≠a",
        "descripcion": "Especialidad del coraz√≥n y sistema cardiovascular",
        "taxonomia": ["coraz√≥n", "cardi√≥logo", "presi√≥n", "infarto"]
    }
    """

    # required=True = Campo obligatorio
    # validate=validate.Length() = Validar longitud del texto
    nombre = fields.Str(
        required=True,
        validate=validate.Length(min=2, max=100),  # Entre 2 y 100 caracteres
        error_messages={"required": "El nombre de la especialidad es obligatorio"},
    )

    descripcion = fields.Str(
        required=True,
        validate=validate.Length(min=10, max=500),  # Descripci√≥n m√°s larga
        error_messages={"required": "La descripci√≥n es obligatoria"},
    )

    # fields.List() = Una lista de elementos
    # fields.Str() dentro = cada elemento de la lista debe ser texto
    taxonomia = fields.List(
        fields.Str(
            validate=validate.Length(min=2, max=50)
        ),  # Cada palabra entre 2-50 caracteres
        validate=validate.Length(min=1, max=20),  # Entre 1 y 20 palabras
        error_messages={"required": "Debe incluir al menos una palabra clave"},
    )

    # dump_default=True = Por defecto ser√° True cuando se guarde
    activa = fields.Bool(dump_default=True)

    @pre_load  # Se ejecuta ANTES de validar los datos
    def clean_data(self, data, **kwargs):
        """
        üßπ LIMPIEZA DE DATOS

        ¬øQu√© hace?
        - Se ejecuta antes de validar
        - Limpia y mejora los datos que llegan
        - Ejemplo: "cardiolog√≠a  " ‚Üí "Cardiolog√≠a"

        ¬øPor qu√© es √∫til?
        - Los usuarios pueden escribir mal (espacios extra, may√∫sculas)
        - Mejora la consistencia de datos
        """
        if isinstance(data, dict):  # Si es un diccionario
            # Limpiar nombre: quitar espacios y poner primera letra may√∫scula
            if "nombre" in data:
                data["nombre"] = data["nombre"].strip().title()

            # Limpiar taxonom√≠a: convertir a min√∫sculas y quitar espacios
            if "taxonomia" in data and isinstance(data["taxonomia"], list):
                data["taxonomia"] = [
                    term.strip().lower()  # Quitar espacios y convertir a min√∫sculas
                    for term in data["taxonomia"]
                    if term.strip()  # Solo si no est√° vac√≠o
                ]
        return data


class HorarioSchema(Schema):
    """
    ‚è∞ ESQUEMA PARA HORARIOS DE ATENCI√ìN

    ¬øPara qu√© sirve?
    - Define cu√°ndo trabaja cada doctor
    - Ejemplo: Lunes de 9:00 a 17:00

    ¬øQu√© valida?
    - Que el d√≠a sea v√°lido (lunes, martes, etc.)
    - Que las horas est√©n en formato correcto
    - Que la hora de inicio sea menor que la de fin
    """

    # validate.OneOf() = Solo permite estos valores espec√≠ficos
    dia = fields.Str(
        required=True,
        validate=validate.OneOf(
            ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]
        ),
        error_messages={"required": "El d√≠a es obligatorio"},
    )

    # fields.Time() = Solo acepta horas (09:00, 14:30, etc.)
    inicio = fields.Time(
        required=True, error_messages={"required": "La hora de inicio es obligatoria"}
    )

    fin = fields.Time(
        required=True, error_messages={"required": "La hora de fin es obligatoria"}
    )

    activo = fields.Bool(dump_default=True)

    @post_load  # Se ejecuta DESPU√âS de validar los datos b√°sicos
    def validate_horario(self, data, **kwargs):
        """
        ‚úÖ VALIDACI√ìN PERSONALIZADA

        ¬øQu√© hace?
        - Verifica l√≥gica de negocio
        - Ejemplo: No puedes terminar antes de empezar

        ¬øCu√°ndo se ejecuta?
        - Despu√©s de que todos los campos individuales sean v√°lidos
        - Antes de guardar en la base de datos
        """
        if data["inicio"] >= data["fin"]:
            raise ValidationError("La hora de inicio debe ser menor que la hora de fin")
        return data


class ProfesionalSchema(BaseSchema):
    """
    üë®‚Äç‚öïÔ∏è ESQUEMA PARA DOCTORES/PROFESIONALES

    ¬øQu√© informaci√≥n guarda?
    - Datos personales del doctor
    - Su especialidad
    - Horarios de trabajo
    - Informaci√≥n de contacto

    Validaciones especiales:
    - RUT chileno v√°lido
    - Tel√©fono con formato chileno
    - Email v√°lido
    """

    nombre = fields.Str(
        required=True,
        validate=validate.Length(min=2, max=100),
        error_messages={"required": "El nombre del profesional es obligatorio"},
    )

    apellido = fields.Str(
        required=True,
        validate=validate.Length(min=2, max=100),
        error_messages={"required": "El apellido es obligatorio"},
    )

    # RUT: Identificaci√≥n chilena √∫nica
    rut = fields.Str(
        required=True,
        validate=validate.Length(min=9, max=12),  # 12.345.678-9 = 12 caracteres m√°ximo
        error_messages={"required": "El RUT es obligatorio"},
    )

    # Referencia a la especialidad que maneja
    especialidad_id = fields.Str(
        required=True, error_messages={"required": "La especialidad es obligatoria"}
    )

    # validate.Regexp() = Validar usando expresi√≥n regular (patr√≥n)
    # Patr√≥n para tel√©fonos chilenos: +56 9 1234 5678 o +56 2 1234 5678
    telefono = fields.Str(
        required=True,
        validate=validate.Regexp(
            r"^\+?56\s?[2-9]\d{8}$|^\+?56\s?9\s?\d{4}\s?\d{4}$",
            error="Formato de tel√©fono chileno inv√°lido",
        ),
        error_messages={"required": "El tel√©fono es obligatorio"},
    )

    # fields.Email() = Validaci√≥n autom√°tica de email
    email = fields.Email(
        required=True, error_messages={"required": "El email es obligatorio"}
    )

    direccion = fields.Str(validate=validate.Length(max=200))

    # fields.List() con fields.Nested() = Lista de objetos complejos
    # Cada doctor puede tener varios horarios (lunes 9-17, martes 14-20, etc.)
    horarios = fields.List(
        fields.Nested(HorarioSchema),  # Cada elemento usa el esquema de HorarioSchema
        validate=validate.Length(min=1, max=7),  # M√≠nimo 1, m√°ximo 7 d√≠as
        error_messages={"required": "Debe definir al menos un horario"},
    )

    disponible = fields.Bool(dump_default=True)

    # Campos opcionales adicionales
    registro_profesional = fields.Str(validate=validate.Length(max=50))
    experiencia_anos = fields.Int(validate=validate.Range(min=0, max=50))
    foto_url = fields.Url()  # URL de foto del doctor

    @pre_load
    def clean_profesional_data(self, data, **kwargs):
        """
        üßπ LIMPIEZA DE DATOS DEL PROFESIONAL

        ¬øQu√© limpia?
        - Nombres: "juan carlos" ‚Üí "Juan Carlos"
        - RUT: "12.345.678-9" ‚Üí "123456789"
        - Tel√©fono: "+56 9 1234 5678" ‚Üí "+5691234578"
        """
        if isinstance(data, dict):
            # Normalizar nombres (primera letra may√∫scula)
            if "nombre" in data:
                data["nombre"] = data["nombre"].strip().title()
            if "apellido" in data:
                data["apellido"] = data["apellido"].strip().title()

            # Limpiar RUT: quitar puntos, guiones, espacios
            # re.sub() = reemplazar caracteres que NO sean d√≠gitos o K
            if "rut" in data:
                data["rut"] = re.sub(r"[^\dkK]", "", data["rut"].upper())

            # Limpiar tel√©fono: quitar espacios, guiones, par√©ntesis
            if "telefono" in data:
                data["telefono"] = re.sub(r"[^\d+]", "", data["telefono"])

        return data

    @post_load
    def validate_rut(self, data, **kwargs):
        """
        ‚úÖ VALIDACI√ìN DE RUT CHILENO

        ¬øQu√© hace?
        - Verifica que el RUT tenga el formato correcto
        - Calcula el d√≠gito verificador
        - Se asegura que sea un RUT real

        ¬øC√≥mo funciona un RUT?
        - 12.345.678-9: Los primeros n√∫meros son el cuerpo, el √∫ltimo es verificador
        - El verificador se calcula con una f√≥rmula matem√°tica
        """
        rut = data.get("rut", "")
        if rut and not self._validar_rut_chileno(rut):
            raise ValidationError({"rut": ["RUT chileno inv√°lido"]})
        return data

    def _validar_rut_chileno(self, rut: str) -> bool:
        """
        üßÆ ALGORITMO DE VALIDACI√ìN DE RUT CHILENO

        ¬øC√≥mo funciona?
        1. Separar cuerpo (12345678) del d√≠gito verificador (9)
        2. Multiplicar cada d√≠gito del cuerpo por 2,3,4,5,6,7,2,3,4...
        3. Sumar todos los resultados
        4. Calcular resto de dividir por 11
        5. El d√≠gito verificador se calcula seg√∫n reglas espec√≠ficas

        Ejemplo: 12345678-9
        - 8*2 + 7*3 + 6*4 + 5*5 + 4*6 + 3*7 + 2*2 + 1*3 = 139
        - 139 % 11 = 7
        - 11 - 7 = 4 (pero como es 9, hay que verificar)
        """
        if len(rut) < 8:
            return False

        cuerpo = rut[:-1]  # Todos menos el √∫ltimo
        dv = rut[-1].upper()  # √öltimo car√°cter en may√∫scula

        if not cuerpo.isdigit():  # Verificar que el cuerpo sean solo n√∫meros
            return False

        # Algoritmo de c√°lculo del d√≠gito verificador
        suma = 0
        multiplo = 2

        # Recorrer el cuerpo desde atr√°s hacia adelante
        for digit in reversed(cuerpo):
            suma += int(digit) * multiplo
            multiplo = multiplo + 1 if multiplo < 7 else 2  # Ciclo 2,3,4,5,6,7,2,3...

        resto = suma % 11
        # Reglas del d√≠gito verificador chileno
        dv_calculado = "K" if resto == 1 else ("0" if resto == 0 else str(11 - resto))

        return dv == dv_calculado


# üéØ FUNCIONES DE UTILIDAD PARA USAR LOS ESQUEMAS


def validate_data(schema_class: Schema, data: Dict[str, Any]) -> Dict[str, Any]:
    """
    ‚úÖ VALIDADOR UNIVERSAL

    ¬øPara qu√© sirve?
    - Funci√≥n que puedes usar con cualquier esquema
    - Valida datos y devuelve datos limpios
    - Si hay errores, los reporta claramente

    ¬øC√≥mo usar?
    especialidad_limpia = validate_data(EspecialidadSchema, datos_del_usuario)

    Par√°metros:
    - schema_class: Qu√© tipo de datos validar (EspecialidadSchema, ProfesionalSchema)
    - data: Los datos que envi√≥ el usuario

    Retorna:
    - Datos validados y limpios, listos para guardar en base de datos
    """
    schema = schema_class()  # Crear instancia del validador
    try:
        return schema.load(data)  # Validar y limpiar datos
    except ValidationError as e:
        # Si hay errores, mostrarlos de forma clara
        raise ValidationError(f"Errores de validaci√≥n: {e.messages}")


def serialize_data(schema_class: Schema, data: Dict[str, Any]) -> Dict[str, Any]:
    """
    üì§ SERIALIZADOR PARA RESPUESTAS JSON

    ¬øPara qu√© sirve?
    - Convierte datos de la base de datos a formato JSON
    - Se asegura que las fechas se vean bien
    - Omite campos sensibles si es necesario

    ¬øCu√°ndo usar?
    - Cuando env√≠as datos al frontend
    - Para APIs que devuelven JSON
    """
    schema = schema_class()
    return schema.dump(data)
