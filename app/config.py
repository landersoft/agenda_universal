"""
‚öôÔ∏è CONFIGURACI√ìN DE LA APLICACI√ìN AGENDA UNIVERSAL

üìö ¬øQU√â HACE ESTE ARCHIVO?
- Lee las variables del archivo .env (como MONGO_URI, FLASK_ENV, etc.)
- Organiza las configuraciones por ambiente (desarrollo, producci√≥n, testing)
- Valida que todo est√© configurado correctamente
- Proporciona valores por defecto seguros

üí° ANALOG√çA: Es como un "traductor" que toma las variables del .env y las organiza
"""

import os
from dotenv import load_dotenv
import logging

# Cargar variables de entorno desde archivo .env
load_dotenv()

logger = logging.getLogger(__name__)


class Config:
    """
    üèóÔ∏è CONFIGURACI√ìN BASE (com√∫n para todos los ambientes)

    ¬øPara qu√© sirve?
    - Define configuraciones que son iguales en desarrollo, testing y producci√≥n
    - Lee las variables que definiste en tu .env
    - Proporciona valores por defecto si algo falta
    """

    # üöÄ CONFIGURACIONES DE FLASK (las que ya tienes en .env)
    FLASK_APP = os.getenv("FLASK_APP", "app:create_app")
    FLASK_ENV = os.getenv("FLASK_ENV", "development")

    # üóÑÔ∏è BASE DE DATOS (usando tu configuraci√≥n actual)
    MONGO_URI = os.getenv("MONGO_URI", "mongodb://admin:admin123@mongodb:27017")

    # üîê SEGURIDAD (nuevas variables que deber√≠as agregar a tu .env)
    SECRET_KEY = os.getenv("SECRET_KEY", "dev-key-cambiar-en-produccion")

    # üìù CONFIGURACI√ìN DE LOGGING
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

    # üåê CONFIGURACI√ìN DE SERVIDOR
    FLASK_DEBUG = (
        os.getenv(
            "FLASK_DEBUG", "True" if FLASK_ENV == "development" else "False"
        ).lower()
        == "true"
    )
    FLASK_PORT = int(os.getenv("FLASK_PORT", "5000"))
    FLASK_HOST = os.getenv("FLASK_HOST", "0.0.0.0")

    # üìÑ CONFIGURACI√ìN DE PAGINACI√ìN (para cuando tengas muchos doctores/pacientes)
    DEFAULT_PAGE_SIZE = int(os.getenv("DEFAULT_PAGE_SIZE", "10"))
    MAX_PAGE_SIZE = int(os.getenv("MAX_PAGE_SIZE", "50"))

    # ‚è±Ô∏è TIMEOUTS (tiempos l√≠mite)
    DB_TIMEOUT = int(os.getenv("DB_TIMEOUT", "30"))  # segundos para conectar a MongoDB
    REQUEST_TIMEOUT = int(
        os.getenv("REQUEST_TIMEOUT", "60")
    )  # segundos para requests HTTP

    # üîí CORS (para que el frontend pueda conectarse)
    CORS_ORIGINS = os.getenv("CORS_ORIGINS", "*").split(",")

    # üè• CONFIGURACIONES ESPEC√çFICAS DE LA AGENDA M√âDICA
    MAX_CITAS_POR_DIA = int(os.getenv("MAX_CITAS_POR_DIA", "20"))
    DURACION_CITA_DEFAULT = int(os.getenv("DURACION_CITA_DEFAULT", "30"))  # minutos
    HORARIO_APERTURA = os.getenv("HORARIO_APERTURA", "08:00")
    HORARIO_CIERRE = os.getenv("HORARIO_CIERRE", "20:00")

    @staticmethod
    def validate():
        """
        ‚úÖ VALIDADOR DE CONFIGURACI√ìN

        ¬øPara qu√© sirve?
        - Verifica que tu .env tenga todo lo necesario
        - Valida que los valores tengan sentido
        - Te avisa si falta algo importante

        ¬øCu√°ndo se ejecuta?
        - Al iniciar la aplicaci√≥n
        - Te ayuda a detectar problemas de configuraci√≥n temprano
        """
        logger.info("üîç Validando configuraci√≥n...")

        # Verificar que existe MONGO_URI
        if not Config.MONGO_URI:
            raise ValueError("‚ùå MONGO_URI no est√° configurado. Revisar archivo .env")

        # Verificar formato de MONGO_URI
        if not Config.MONGO_URI.startswith("mongodb://"):
            raise ValueError("‚ùå MONGO_URI debe empezar con mongodb://")

        # Advertencia sobre SECRET_KEY en desarrollo
        if Config.SECRET_KEY == "dev-key-cambiar-en-produccion":
            if Config.FLASK_ENV == "production":
                raise ValueError("‚ùå Debes cambiar SECRET_KEY en producci√≥n")
            else:
                logger.warning("‚ö†Ô∏è Usando SECRET_KEY por defecto (OK para desarrollo)")

        # Validar configuraciones num√©ricas
        if Config.DEFAULT_PAGE_SIZE <= 0:
            raise ValueError("‚ùå DEFAULT_PAGE_SIZE debe ser mayor a 0")

        if Config.MAX_PAGE_SIZE < Config.DEFAULT_PAGE_SIZE:
            raise ValueError("‚ùå MAX_PAGE_SIZE debe ser mayor que DEFAULT_PAGE_SIZE")

        # Validar horarios de la cl√≠nica
        try:
            from datetime import datetime

            datetime.strptime(Config.HORARIO_APERTURA, "%H:%M")
            datetime.strptime(Config.HORARIO_CIERRE, "%H:%M")
        except ValueError:
            raise ValueError(
                "‚ùå HORARIO_APERTURA y HORARIO_CIERRE deben ser formato HH:MM (ej:08:00)"
            )

        logger.info("‚úÖ Configuraci√≥n v√°lida")


class DevelopmentConfig(Config):
    """
    üîß CONFIGURACI√ìN PARA DESARROLLO (tu ambiente actual)

    ¬øCu√°ndo se usa?
    - Cuando FLASK_ENV=development (como tienes en tu .env)
    - Para desarrollo local con Docker
    - Cuando est√°s programando y testeando

    ¬øQu√© tiene de especial?
    - DEBUG activado (muestra errores detallados)
    - Logs m√°s verbosos para debugging
    - Validaciones m√°s permisivas
    - Base de datos usando tu Docker MongoDB
    """

    DEBUG = True
    TESTING = False

    # Usar exactamente tu configuraci√≥n de MongoDB con Docker
    MONGO_URI = os.getenv("MONGO_URI", "mongodb://admin:admin123@mongodb:27017")

    # En desarrollo, SECRET_KEY puede ser simple
    SECRET_KEY = os.getenv("SECRET_KEY", "desarrollo-agenda-universal-2025")

    # Logging m√°s detallado para desarrollo
    LOG_LEVEL = "DEBUG"

    # CORS permisivo para desarrollo (permite conexiones desde cualquier origen)
    CORS_ORIGINS = ["*"]

    @staticmethod
    def validate():
        """Validaci√≥n espec√≠fica para desarrollo"""
        logger.info("üîß Validando configuraci√≥n de DESARROLLO...")

        # Ejecutar validaciones base
        Config.validate()

        # Verificar que MongoDB est√© disponible (tu container Docker)
        if "mongodb" not in DevelopmentConfig.MONGO_URI:
            logger.warning(
                "‚ö†Ô∏è MONGO_URI no apunta a container 'mongodb'. ¬øDocker corriendo?"
            )

        # Verificar credenciales de MongoDB
        if "admin:admin123" not in DevelopmentConfig.MONGO_URI:
            logger.warning("‚ö†Ô∏è Credenciales de MongoDB diferentes a las esperadas")

        logger.info("‚úÖ Configuraci√≥n de desarrollo v√°lida")


class ProductionConfig(Config):
    """
    üöÄ CONFIGURACI√ìN PARA PRODUCCI√ìN (Render, AWS, etc.)

    ¬øCu√°ndo se usa?
    - Cuando FLASK_ENV=production
    - En el servidor real (Render, Heroku, etc.)
    - Para usuarios reales

    ¬øQu√© tiene de especial?
    - DEBUG desactivado (no mostrar errores internos)
    - Validaciones estrictas de seguridad
    - Logs optimizados
    - Configuraciones seguras
    """

    DEBUG = False
    TESTING = False

    # En producci√≥n, estas variables DEBEN estar en .env del servidor
    MONGO_URI = os.getenv("MONGO_URI")  # Sin valor por defecto
    SECRET_KEY = os.getenv("SECRET_KEY")  # Sin valor por defecto

    # Logging optimizado para producci√≥n
    LOG_LEVEL = os.getenv("LOG_LEVEL", "WARNING")

    # CORS m√°s restrictivo (solo dominios espec√≠ficos)
    CORS_ORIGINS = os.getenv("CORS_ORIGINS", "https://mi-frontend.com").split(",")

    @staticmethod
    def validate():
        """Validaci√≥n ESTRICTA para producci√≥n"""
        logger.info("üöÄ Validando configuraci√≥n de PRODUCCI√ìN...")

        # Ejecutar validaciones base
        Config.validate()

        # En producci√≥n, estas variables son OBLIGATORIAS
        if not ProductionConfig.MONGO_URI:
            raise ValueError("‚ùå MONGO_URI es obligatorio en producci√≥n")

        if not ProductionConfig.SECRET_KEY:
            raise ValueError("‚ùå SECRET_KEY es obligatorio en producci√≥n")

        # SECRET_KEY debe ser suficientemente segura
        if len(ProductionConfig.SECRET_KEY) < 32:
            raise ValueError(
                "‚ùå SECRET_KEY debe tener al menos 32 caracteres en producci√≥n"
            )

        # Verificar que no use credenciales por defecto
        if "admin:admin123" in ProductionConfig.MONGO_URI:
            raise ValueError("‚ùå No usar credenciales por defecto en producci√≥n")

        logger.info("‚úÖ Configuraci√≥n de producci√≥n v√°lida")


class TestingConfig(Config):
    """
    üß™ CONFIGURACI√ìN PARA TESTING (pruebas autom√°ticas)

    ¬øCu√°ndo se usa?
    - Para correr pytest
    - Para pruebas autom√°ticas en CI/CD
    - Para testing de funcionalidades

    ¬øQu√© tiene de especial?
    - Base de datos separada para pruebas
    - Configuraciones optimizadas para velocidad
    - No afecta datos reales
    """

    DEBUG = True
    TESTING = True

    # Base de datos separada para pruebas (no afecta datos reales)
    MONGO_URI = os.getenv(
        "MONGO_TEST_URI", "mongodb://admin:admin123@mongodb:27017/agenda_test"
    )

    # SECRET_KEY simple para testing
    SECRET_KEY = "testing-key-no-importa-seguridad"

    # Configuraciones optimizadas para velocidad de testing
    DEFAULT_PAGE_SIZE = 5
    MAX_PAGE_SIZE = 10
    DB_TIMEOUT = 5

    @staticmethod
    def validate():
        """Validaci√≥n para testing"""
        logger.info("üß™ Validando configuraci√≥n de TESTING...")

        # Validaciones m√≠nimas para testing
        if not TestingConfig.MONGO_URI:
            raise ValueError("‚ùå MONGO_TEST_URI requerido para testing")

        # Verificar que use base de datos de testing
        if "test" not in TestingConfig.MONGO_URI.lower():
            logger.warning(
                "‚ö†Ô∏è Base de datos de testing deber√≠a incluir 'test' en el nombre"
            )

        logger.info("‚úÖ Configuraci√≥n de testing v√°lida")


# üéØ FUNCI√ìN PARA OBTENER CONFIGURACI√ìN CORRECTA
def get_config():
    """
    üéØ SELECTOR AUTOM√ÅTICO DE CONFIGURACI√ìN

    ¬øPara qu√© sirve?
    - Lee tu FLASK_ENV del .env
    - Retorna la configuraci√≥n correcta autom√°ticamente
    - development ‚Üí DevelopmentConfig
    - production ‚Üí ProductionConfig
    - testing ‚Üí TestingConfig

    ¬øC√≥mo se usa?
    config = get_config()
    app.config.from_object(config)
    """

    env = os.getenv("FLASK_ENV", "development").lower()

    if env == "production":
        logger.info("üöÄ Usando configuraci√≥n de PRODUCCI√ìN")
        return ProductionConfig
    elif env == "testing":
        logger.info("üß™ Usando configuraci√≥n de TESTING")
        return TestingConfig
    else:
        logger.info("üîß Usando configuraci√≥n de DESARROLLO")
        return DevelopmentConfig


# üìã VARIABLES ADICIONALES RECOMENDADAS PARA TU .ENV

"""
üìù VARIABLES RECOMENDADAS PARA AGREGAR A TU .env:

# Seguridad (IMPORTANTE para producci√≥n)
SECRET_KEY=tu-clave-super-secreta-de-32-caracteres

# Logging (opcional)
LOG_LEVEL=INFO

# Servidor (opcional, ya tienes buenos defaults)
FLASK_PORT=5000
FLASK_HOST=0.0.0.0

# Agenda m√©dica (opcional)
MAX_CITAS_POR_DIA=25
DURACION_CITA_DEFAULT=30
HORARIO_APERTURA=08:00
HORARIO_CIERRE=20:00

# Para testing (opcional)
MONGO_TEST_URI=mongodb://admin:admin123@mongodb:27017/agenda_test

# CORS (cuando tengas frontend)
CORS_ORIGINS=http://localhost:3000,http://localhost:8080
"""

# üöÄ INICIALIZACI√ìN
logger.info("üìÅ M√≥dulo config.py cargado correctamente")
logger.info(f"üåç Ambiente detectado: {os.getenv('FLASK_ENV', 'development')}")
logger.info(f"üóÑÔ∏è MongoDB: {os.getenv('MONGO_URI', 'No configurado')}")
